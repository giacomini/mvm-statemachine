/** Generated by YAKINDU Statechart Tools code generator. */

#include "MVMStateMachine.h"

/*! \file Implementation of the state machine 'MVMStateMachine'
*/




MVMStateMachine::MVMStateMachine()  :
timer(sc_null),
stateConfVectorPosition(0),
iface()
{
}

MVMStateMachine::~MVMStateMachine()
{
}


void MVMStateMachine::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = MVMStateMachine_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
}

void MVMStateMachine::enter()
{
	/* Default enter sequence for statechart MVMStateMachine */
	enseq_main_region_default();
}

void MVMStateMachine::exit()
{
	/* Default exit sequence for statechart MVMStateMachine */
	exseq_main_region();
}

sc_boolean MVMStateMachine::isActive() const
{
	return stateConfVector[0] != MVMStateMachine_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean MVMStateMachine::isFinal() const
{
   return false;}

void MVMStateMachine::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case main_region_Inspiration :
		{
			main_region_Inspiration_react(true);
			break;
		}
		case main_region_Expiration :
		{
			main_region_Expiration_react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void MVMStateMachine::clearInEvents()
{
	timeEvents[0] = false; 
	timeEvents[1] = false; 
}

void MVMStateMachine::clearOutEvents()
{
}


void MVMStateMachine::setTimer(TimerInterface* timerInterface)
{
	this->timer = timerInterface;
}

TimerInterface* MVMStateMachine::getTimer()
{
	return timer;
}

sc_integer MVMStateMachine::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void MVMStateMachine::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		*(sc_boolean*)evid = true;
	}				
}

sc_boolean MVMStateMachine::isStateActive(MVMStateMachineStates state) const
{
	switch (state)
	{
		case main_region_Inspiration : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_INSPIRATION] == main_region_Inspiration
			);
		case main_region_Expiration : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_EXPIRATION] == main_region_Expiration
			);
		default: return false;
	}
}

MVMStateMachine::DefaultSCI* MVMStateMachine::getDefaultSCI()
{
	return &iface;
}
HAL * MVMStateMachine::DefaultSCI::get_hal() const
{
	return hal;
}

HAL * MVMStateMachine::get_hal() const
{
	return iface.hal;
}

void MVMStateMachine::DefaultSCI::set_hal(HAL * value)
{
	this->hal = value;
}

void MVMStateMachine::set_hal(HAL * value)
{
	iface.hal = value;
}


// implementations of all internal functions

/* Entry action for state 'Inspiration'. */
void MVMStateMachine::enact_main_region_Inspiration()
{
	/* Entry action for state 'Inspiration'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[0]), (1 * 1000), false);
	(*(iface.hal)).startInspiration();
}

/* Entry action for state 'Expiration'. */
void MVMStateMachine::enact_main_region_Expiration()
{
	/* Entry action for state 'Expiration'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[1]), (1 * 1000), false);
	(*(iface.hal)).startExpiration();
}

/* Exit action for state 'Inspiration'. */
void MVMStateMachine::exact_main_region_Inspiration()
{
	/* Exit action for state 'Inspiration'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* Exit action for state 'Expiration'. */
void MVMStateMachine::exact_main_region_Expiration()
{
	/* Exit action for state 'Expiration'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
}

/* 'default' enter sequence for state Inspiration */
void MVMStateMachine::enseq_main_region_Inspiration_default()
{
	/* 'default' enter sequence for state Inspiration */
	enact_main_region_Inspiration();
	stateConfVector[0] = main_region_Inspiration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Expiration */
void MVMStateMachine::enseq_main_region_Expiration_default()
{
	/* 'default' enter sequence for state Expiration */
	enact_main_region_Expiration();
	stateConfVector[0] = main_region_Expiration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region main region */
void MVMStateMachine::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* Default exit sequence for state Inspiration */
void MVMStateMachine::exseq_main_region_Inspiration()
{
	/* Default exit sequence for state Inspiration */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_Inspiration();
}

/* Default exit sequence for state Expiration */
void MVMStateMachine::exseq_main_region_Expiration()
{
	/* Default exit sequence for state Expiration */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_Expiration();
}

/* Default exit sequence for region main region */
void MVMStateMachine::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of MVMStateMachine.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_Inspiration :
		{
			exseq_main_region_Inspiration();
			break;
		}
		case main_region_Expiration :
		{
			exseq_main_region_Expiration();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void MVMStateMachine::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_Inspiration_default();
}

sc_boolean MVMStateMachine::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean MVMStateMachine::main_region_Inspiration_react(const sc_boolean try_transition) {
	/* The reactions of state Inspiration. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (timeEvents[0])
			{ 
				exseq_main_region_Inspiration();
				enseq_main_region_Expiration_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_Expiration_react(const sc_boolean try_transition) {
	/* The reactions of state Expiration. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (timeEvents[1])
			{ 
				exseq_main_region_Expiration();
				enseq_main_region_Inspiration_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}



