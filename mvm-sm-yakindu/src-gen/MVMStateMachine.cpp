/** Generated by YAKINDU Statechart Tools code generator. */

#include "MVMStateMachine.h"

/*! \file Implementation of the state machine 'MVMStateMachine'
*/


const int16_t MVMStateMachine::DefaultSCI::max_exp_pause = 2000;
const int16_t MVMStateMachine::DefaultSCI::max_ins_pause = 1000;
const int16_t MVMStateMachine::DefaultSCI::triggerWindowDelay_ms = 700;



MVMStateMachine::MVMStateMachine()  :
timer(sc_null),
stateConfVectorPosition(0),
iface(),
iface_OCB(sc_null)
{
}

MVMStateMachine::~MVMStateMachine()
{
}


void MVMStateMachine::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = MVMStateMachine_last_state;
	
	stateConfVectorPosition = 0;
	

	clearInEvents();
	clearOutEvents();
	
	/* Default init sequence for statechart MVMStateMachine */
	iface.max_rm_time = 0;
	iface.exp_pause_button = false;
	iface.ins_pause_button = false;
	iface.rm_button_start = false;
	iface.rm_button_stop = false;
	iface.inspiration_duration_ms = 0;
	iface.expiration_duration_ms = 0;
	iface.min_exp_time_psv = 2000;
	iface.max_insp_time_psv = 2000;
	iface.apnealag = 3000;
}

void MVMStateMachine::enter()
{
	/* Default enter sequence for statechart MVMStateMachine */
	enseq_main_region_default();
}

void MVMStateMachine::exit()
{
	/* Default exit sequence for statechart MVMStateMachine */
	exseq_main_region();
}

sc_boolean MVMStateMachine::isActive() const
{
	return stateConfVector[0] != MVMStateMachine_last_state;
}

sc_boolean MVMStateMachine::isFinal() const
{
	return (stateConfVector[0] == main_region__final_);
}

void MVMStateMachine::runCycle()
{
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case main_region_StartUp :
		{
			main_region_StartUp_react(true);
			break;
		}
		case main_region_PCV_r1_ExpiratoryPause :
		{
			main_region_PCV_r1_ExpiratoryPause_react(true);
			break;
		}
		case main_region_PCV_r1_Expiration :
		{
			main_region_PCV_r1_Expiration_react(true);
			break;
		}
		case main_region_PCV_r1_Inspiration :
		{
			main_region_PCV_r1_Inspiration_react(true);
			break;
		}
		case main_region_PCV_r1_InspiratoryPause :
		{
			main_region_PCV_r1_InspiratoryPause_react(true);
			break;
		}
		case main_region_PCV_r1_VentilationOff :
		{
			main_region_PCV_r1_VentilationOff_react(true);
			break;
		}
		case main_region_PCV_r1_RM :
		{
			main_region_PCV_r1_RM_react(true);
			break;
		}
		case main_region_PSV_r1_ExpiratoryPause :
		{
			main_region_PSV_r1_ExpiratoryPause_react(true);
			break;
		}
		case main_region_PSV_r1_Expiration :
		{
			main_region_PSV_r1_Expiration_react(true);
			break;
		}
		case main_region_PSV_r1_Inspiration :
		{
			main_region_PSV_r1_Inspiration_react(true);
			break;
		}
		case main_region_PSV_r1_VentilationOff :
		{
			main_region_PSV_r1_VentilationOff_react(true);
			break;
		}
		case main_region_PSV_r1_InspiratoryPause :
		{
			main_region_PSV_r1_InspiratoryPause_react(true);
			break;
		}
		case main_region_PSV_r1_RM :
		{
			main_region_PSV_r1_RM_react(true);
			break;
		}
		case main_region_TestMode :
		{
			main_region_TestMode_react(true);
			break;
		}
		case main_region_Error :
		{
			main_region_Error_react(true);
			break;
		}
		case main_region_PatientSelection :
		{
			main_region_PatientSelection_react(true);
			break;
		}
		case main_region__final_ :
		{
			main_region__final__react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void MVMStateMachine::clearInEvents()
{
	iface.startupEnded_raised = false;
	iface.resume_raised = false;
	iface.newPatient_raised = false;
	iface.testMachine_raised = false;
	iface.testPassed_raised = false;
	iface.testFailed_raised = false;
	iface.poweroff_raised = false;
	iface.startVentilation_raised = false;
	iface.stopVentilation_raised = false;
	iface.setMode_raised = false;
	timeEvents[0] = false; 
	timeEvents[1] = false; 
	timeEvents[2] = false; 
	timeEvents[3] = false; 
	timeEvents[4] = false; 
	timeEvents[5] = false; 
	timeEvents[6] = false; 
	timeEvents[7] = false; 
	timeEvents[8] = false; 
	timeEvents[9] = false; 
	timeEvents[10] = false; 
	timeEvents[11] = false; 
}

void MVMStateMachine::clearOutEvents()
{
	iface.Finish_raised = false;
}


void MVMStateMachine::setTimer(TimerInterface* timerInterface)
{
	this->timer = timerInterface;
}

TimerInterface* MVMStateMachine::getTimer()
{
	return timer;
}

sc_integer MVMStateMachine::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void MVMStateMachine::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		*(sc_boolean*)evid = true;
	}				
}

sc_boolean MVMStateMachine::isStateActive(MVMStateMachineStates state) const
{
	switch (state)
	{
		case main_region_StartUp : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STARTUP] == main_region_StartUp
			);
		case main_region_PCV : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV] >= main_region_PCV
				&& stateConfVector[SCVI_MAIN_REGION_PCV] <= main_region_PCV_r1_RM);
		case main_region_PCV_r1_ExpiratoryPause : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE] == main_region_PCV_r1_ExpiratoryPause
			);
		case main_region_PCV_r1_Expiration : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV_R1_EXPIRATION] == main_region_PCV_r1_Expiration
			);
		case main_region_PCV_r1_Inspiration : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV_R1_INSPIRATION] == main_region_PCV_r1_Inspiration
			);
		case main_region_PCV_r1_InspiratoryPause : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE] == main_region_PCV_r1_InspiratoryPause
			);
		case main_region_PCV_r1_VentilationOff : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV_R1_VENTILATIONOFF] == main_region_PCV_r1_VentilationOff
			);
		case main_region_PCV_r1_RM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PCV_R1_RM] == main_region_PCV_r1_RM
			);
		case main_region_PSV : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV] >= main_region_PSV
				&& stateConfVector[SCVI_MAIN_REGION_PSV] <= main_region_PSV_r1_RM);
		case main_region_PSV_r1_ExpiratoryPause : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE] == main_region_PSV_r1_ExpiratoryPause
			);
		case main_region_PSV_r1_Expiration : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV_R1_EXPIRATION] == main_region_PSV_r1_Expiration
			);
		case main_region_PSV_r1_Inspiration : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV_R1_INSPIRATION] == main_region_PSV_r1_Inspiration
			);
		case main_region_PSV_r1_VentilationOff : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV_R1_VENTILATIONOFF] == main_region_PSV_r1_VentilationOff
			);
		case main_region_PSV_r1_InspiratoryPause : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE] == main_region_PSV_r1_InspiratoryPause
			);
		case main_region_PSV_r1_RM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PSV_R1_RM] == main_region_PSV_r1_RM
			);
		case main_region_TestMode : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_TESTMODE] == main_region_TestMode
			);
		case main_region_Error : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ERROR] == main_region_Error
			);
		case main_region_PatientSelection : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_PATIENTSELECTION] == main_region_PatientSelection
			);
		case main_region__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION__FINAL_] == main_region__final_
			);
		default: return false;
	}
}

MVMStateMachine::DefaultSCI* MVMStateMachine::getDefaultSCI()
{
	return &iface;
}
/* Functions for event startupEnded in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_startupEnded()
{
	startupEnded_raised = true;
}
void MVMStateMachine::raise_startupEnded()
{
	iface.raise_startupEnded();
}
/* Functions for event resume in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_resume()
{
	resume_raised = true;
}
void MVMStateMachine::raise_resume()
{
	iface.raise_resume();
}
/* Functions for event newPatient in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_newPatient()
{
	newPatient_raised = true;
}
void MVMStateMachine::raise_newPatient()
{
	iface.raise_newPatient();
}
/* Functions for event testMachine in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_testMachine()
{
	testMachine_raised = true;
}
void MVMStateMachine::raise_testMachine()
{
	iface.raise_testMachine();
}
/* Functions for event testPassed in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_testPassed()
{
	testPassed_raised = true;
}
void MVMStateMachine::raise_testPassed()
{
	iface.raise_testPassed();
}
/* Functions for event testFailed in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_testFailed()
{
	testFailed_raised = true;
}
void MVMStateMachine::raise_testFailed()
{
	iface.raise_testFailed();
}
/* Functions for event poweroff in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_poweroff()
{
	poweroff_raised = true;
}
void MVMStateMachine::raise_poweroff()
{
	iface.raise_poweroff();
}
/* Functions for event startVentilation in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_startVentilation()
{
	startVentilation_raised = true;
}
void MVMStateMachine::raise_startVentilation()
{
	iface.raise_startVentilation();
}
/* Functions for event stopVentilation in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_stopVentilation()
{
	stopVentilation_raised = true;
}
void MVMStateMachine::raise_stopVentilation()
{
	iface.raise_stopVentilation();
}
/* Functions for event setMode in interface DefaultSCI */
void MVMStateMachine::DefaultSCI::raise_setMode(MVM_mode value)
{
	setMode_value = value;
	setMode_raised = true;
}
void MVMStateMachine::raise_setMode(MVM_mode value)
{
	iface.raise_setMode(value);
}
/* Functions for event Finish in interface DefaultSCI */
sc_boolean MVMStateMachine::DefaultSCI::isRaised_finish() const
{
	return Finish_raised;
}
sc_boolean MVMStateMachine::isRaised_finish() const
{
	return iface.isRaised_finish();
}
int16_t MVMStateMachine::DefaultSCI::get_max_exp_pause() const
{
	return max_exp_pause;
}

int16_t MVMStateMachine::get_max_exp_pause() const
{
	return MVMStateMachine::DefaultSCI::max_exp_pause;
}

int16_t MVMStateMachine::DefaultSCI::get_max_ins_pause() const
{
	return max_ins_pause;
}

int16_t MVMStateMachine::get_max_ins_pause() const
{
	return MVMStateMachine::DefaultSCI::max_ins_pause;
}

int16_t MVMStateMachine::DefaultSCI::get_max_rm_time() const
{
	return max_rm_time;
}

int16_t MVMStateMachine::get_max_rm_time() const
{
	return iface.max_rm_time;
}

void MVMStateMachine::DefaultSCI::set_max_rm_time(int16_t value)
{
	this->max_rm_time = value;
}

void MVMStateMachine::set_max_rm_time(int16_t value)
{
	iface.max_rm_time = value;
}

sc_boolean MVMStateMachine::DefaultSCI::get_exp_pause_button() const
{
	return exp_pause_button;
}

sc_boolean MVMStateMachine::get_exp_pause_button() const
{
	return iface.exp_pause_button;
}

void MVMStateMachine::DefaultSCI::set_exp_pause_button(sc_boolean value)
{
	this->exp_pause_button = value;
}

void MVMStateMachine::set_exp_pause_button(sc_boolean value)
{
	iface.exp_pause_button = value;
}

sc_boolean MVMStateMachine::DefaultSCI::get_ins_pause_button() const
{
	return ins_pause_button;
}

sc_boolean MVMStateMachine::get_ins_pause_button() const
{
	return iface.ins_pause_button;
}

void MVMStateMachine::DefaultSCI::set_ins_pause_button(sc_boolean value)
{
	this->ins_pause_button = value;
}

void MVMStateMachine::set_ins_pause_button(sc_boolean value)
{
	iface.ins_pause_button = value;
}

sc_boolean MVMStateMachine::DefaultSCI::get_rm_button_start() const
{
	return rm_button_start;
}

sc_boolean MVMStateMachine::get_rm_button_start() const
{
	return iface.rm_button_start;
}

void MVMStateMachine::DefaultSCI::set_rm_button_start(sc_boolean value)
{
	this->rm_button_start = value;
}

void MVMStateMachine::set_rm_button_start(sc_boolean value)
{
	iface.rm_button_start = value;
}

sc_boolean MVMStateMachine::DefaultSCI::get_rm_button_stop() const
{
	return rm_button_stop;
}

sc_boolean MVMStateMachine::get_rm_button_stop() const
{
	return iface.rm_button_stop;
}

void MVMStateMachine::DefaultSCI::set_rm_button_stop(sc_boolean value)
{
	this->rm_button_stop = value;
}

void MVMStateMachine::set_rm_button_stop(sc_boolean value)
{
	iface.rm_button_stop = value;
}

int16_t MVMStateMachine::DefaultSCI::get_inspiration_duration_ms() const
{
	return inspiration_duration_ms;
}

int16_t MVMStateMachine::get_inspiration_duration_ms() const
{
	return iface.inspiration_duration_ms;
}

void MVMStateMachine::DefaultSCI::set_inspiration_duration_ms(int16_t value)
{
	this->inspiration_duration_ms = value;
}

void MVMStateMachine::set_inspiration_duration_ms(int16_t value)
{
	iface.inspiration_duration_ms = value;
}

int16_t MVMStateMachine::DefaultSCI::get_expiration_duration_ms() const
{
	return expiration_duration_ms;
}

int16_t MVMStateMachine::get_expiration_duration_ms() const
{
	return iface.expiration_duration_ms;
}

void MVMStateMachine::DefaultSCI::set_expiration_duration_ms(int16_t value)
{
	this->expiration_duration_ms = value;
}

void MVMStateMachine::set_expiration_duration_ms(int16_t value)
{
	iface.expiration_duration_ms = value;
}

int16_t MVMStateMachine::DefaultSCI::get_triggerWindowDelay_ms() const
{
	return triggerWindowDelay_ms;
}

int16_t MVMStateMachine::get_triggerWindowDelay_ms() const
{
	return MVMStateMachine::DefaultSCI::triggerWindowDelay_ms;
}

int16_t MVMStateMachine::DefaultSCI::get_min_exp_time_psv() const
{
	return min_exp_time_psv;
}

int16_t MVMStateMachine::get_min_exp_time_psv() const
{
	return iface.min_exp_time_psv;
}

void MVMStateMachine::DefaultSCI::set_min_exp_time_psv(int16_t value)
{
	this->min_exp_time_psv = value;
}

void MVMStateMachine::set_min_exp_time_psv(int16_t value)
{
	iface.min_exp_time_psv = value;
}

int16_t MVMStateMachine::DefaultSCI::get_max_insp_time_psv() const
{
	return max_insp_time_psv;
}

int16_t MVMStateMachine::get_max_insp_time_psv() const
{
	return iface.max_insp_time_psv;
}

void MVMStateMachine::DefaultSCI::set_max_insp_time_psv(int16_t value)
{
	this->max_insp_time_psv = value;
}

void MVMStateMachine::set_max_insp_time_psv(int16_t value)
{
	iface.max_insp_time_psv = value;
}

int16_t MVMStateMachine::DefaultSCI::get_apnealag() const
{
	return apnealag;
}

int16_t MVMStateMachine::get_apnealag() const
{
	return iface.apnealag;
}

void MVMStateMachine::DefaultSCI::set_apnealag(int16_t value)
{
	this->apnealag = value;
}

void MVMStateMachine::set_apnealag(int16_t value)
{
	iface.apnealag = value;
}

void MVMStateMachine::setDefaultSCI_OCB(DefaultSCI_OCB* operationCallback)
{
	iface_OCB = operationCallback;
}

// implementations of all internal functions

sc_boolean MVMStateMachine::check_main_region_PCV_r1__choice_0_tr0_tr0()
{
	return iface.exp_pause_button;
}

sc_boolean MVMStateMachine::check_main_region_PCV_r1__choice_1_tr0_tr0()
{
	return iface.ins_pause_button;
}

sc_boolean MVMStateMachine::check_main_region_PCV_r1__choice_1_tr1_tr1()
{
	return !iface.ins_pause_button;
}

sc_boolean MVMStateMachine::check_main_region_PCV_r1__choice_2_tr0_tr0()
{
	return iface.rm_button_start;
}

sc_boolean MVMStateMachine::check_main_region_PCV_r1__choice_2_tr1_tr1()
{
	return !iface.rm_button_start;
}

sc_boolean MVMStateMachine::check_main_region_PSV_r1__choice_0_tr0_tr0()
{
	return !iface.ins_pause_button;
}

sc_boolean MVMStateMachine::check_main_region_PSV_r1__choice_0_tr1_tr1()
{
	return iface.ins_pause_button;
}

sc_boolean MVMStateMachine::check_main_region_PSV_r1__choice_1_tr0_tr0()
{
	return iface.rm_button_start;
}

sc_boolean MVMStateMachine::check_main_region_PSV_r1__choice_1_tr1_tr1()
{
	return !iface.rm_button_start;
}

void MVMStateMachine::effect_main_region_PCV_r1__choice_0_tr0()
{
	enseq_main_region_PCV_r1_ExpiratoryPause_default();
}

void MVMStateMachine::effect_main_region_PCV_r1__choice_0_tr1()
{
	enseq_main_region_PCV_r1_Inspiration_default();
}

void MVMStateMachine::effect_main_region_PCV_r1__choice_1_tr0()
{
	enseq_main_region_PCV_r1_InspiratoryPause_default();
}

void MVMStateMachine::effect_main_region_PCV_r1__choice_1_tr1()
{
	react_main_region_PCV_r1__choice_2();
}

void MVMStateMachine::effect_main_region_PCV_r1__choice_2_tr0()
{
	enseq_main_region_PCV_r1_RM_default();
}

void MVMStateMachine::effect_main_region_PCV_r1__choice_2_tr1()
{
	enseq_main_region_PCV_r1_Expiration_default();
}

void MVMStateMachine::effect_main_region_PSV_r1__choice_0_tr0()
{
	react_main_region_PSV_r1__choice_1();
}

void MVMStateMachine::effect_main_region_PSV_r1__choice_0_tr1()
{
	enseq_main_region_PSV_r1_InspiratoryPause_default();
}

void MVMStateMachine::effect_main_region_PSV_r1__choice_1_tr0()
{
	enseq_main_region_PSV_r1_RM_default();
}

void MVMStateMachine::effect_main_region_PSV_r1__choice_1_tr1()
{
	enseq_main_region_PSV_r1_Expiration_default();
}

/* Entry action for state 'ExpiratoryPause'. */
void MVMStateMachine::enact_main_region_PCV_r1_ExpiratoryPause()
{
	/* Entry action for state 'ExpiratoryPause'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[0]), MVMStateMachine::DefaultSCI::max_exp_pause, false);
}

/* Entry action for state 'Expiration'. */
void MVMStateMachine::enact_main_region_PCV_r1_Expiration()
{
	/* Entry action for state 'Expiration'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[1]), iface.expiration_duration_ms, false);
	timer->setTimer(this, (sc_eventid)(&timeEvents[2]), MVMStateMachine::DefaultSCI::triggerWindowDelay_ms, false);
	iface_OCB->openOutputValve();
}

/* Entry action for state 'Inspiration'. */
void MVMStateMachine::enact_main_region_PCV_r1_Inspiration()
{
	/* Entry action for state 'Inspiration'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[3]), iface.inspiration_duration_ms, false);
	iface_OCB->openInputValve();
}

/* Entry action for state 'InspiratoryPause'. */
void MVMStateMachine::enact_main_region_PCV_r1_InspiratoryPause()
{
	/* Entry action for state 'InspiratoryPause'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[4]), MVMStateMachine::DefaultSCI::max_ins_pause, false);
}

/* Entry action for state 'RM'. */
void MVMStateMachine::enact_main_region_PCV_r1_RM()
{
	/* Entry action for state 'RM'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[5]), iface.max_rm_time, false);
}

/* Entry action for state 'ExpiratoryPause'. */
void MVMStateMachine::enact_main_region_PSV_r1_ExpiratoryPause()
{
	/* Entry action for state 'ExpiratoryPause'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[6]), MVMStateMachine::DefaultSCI::max_exp_pause, false);
	iface_OCB->closeOutputValve();
}

/* Entry action for state 'Expiration'. */
void MVMStateMachine::enact_main_region_PSV_r1_Expiration()
{
	/* Entry action for state 'Expiration'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[7]), iface.apnealag, false);
	timer->setTimer(this, (sc_eventid)(&timeEvents[8]), iface.min_exp_time_psv, false);
	iface_OCB->openOutputValve();
}

/* Entry action for state 'Inspiration'. */
void MVMStateMachine::enact_main_region_PSV_r1_Inspiration()
{
	/* Entry action for state 'Inspiration'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[9]), iface.max_insp_time_psv, false);
	iface_OCB->openInputValve();
}

/* Entry action for state 'InspiratoryPause'. */
void MVMStateMachine::enact_main_region_PSV_r1_InspiratoryPause()
{
	/* Entry action for state 'InspiratoryPause'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[10]), MVMStateMachine::DefaultSCI::max_ins_pause, false);
}

/* Entry action for state 'RM'. */
void MVMStateMachine::enact_main_region_PSV_r1_RM()
{
	/* Entry action for state 'RM'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[11]), iface.max_rm_time, false);
}

/* Exit action for state 'ExpiratoryPause'. */
void MVMStateMachine::exact_main_region_PCV_r1_ExpiratoryPause()
{
	/* Exit action for state 'ExpiratoryPause'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* Exit action for state 'Expiration'. */
void MVMStateMachine::exact_main_region_PCV_r1_Expiration()
{
	/* Exit action for state 'Expiration'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
}

/* Exit action for state 'Inspiration'. */
void MVMStateMachine::exact_main_region_PCV_r1_Inspiration()
{
	/* Exit action for state 'Inspiration'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
	iface_OCB->closeInputValve();
}

/* Exit action for state 'InspiratoryPause'. */
void MVMStateMachine::exact_main_region_PCV_r1_InspiratoryPause()
{
	/* Exit action for state 'InspiratoryPause'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[4]));
}

/* Exit action for state 'RM'. */
void MVMStateMachine::exact_main_region_PCV_r1_RM()
{
	/* Exit action for state 'RM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[5]));
}

/* Exit action for state 'ExpiratoryPause'. */
void MVMStateMachine::exact_main_region_PSV_r1_ExpiratoryPause()
{
	/* Exit action for state 'ExpiratoryPause'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[6]));
}

/* Exit action for state 'Expiration'. */
void MVMStateMachine::exact_main_region_PSV_r1_Expiration()
{
	/* Exit action for state 'Expiration'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[7]));
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[8]));
}

/* Exit action for state 'Inspiration'. */
void MVMStateMachine::exact_main_region_PSV_r1_Inspiration()
{
	/* Exit action for state 'Inspiration'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[9]));
	iface_OCB->closeInputValve();
}

/* Exit action for state 'InspiratoryPause'. */
void MVMStateMachine::exact_main_region_PSV_r1_InspiratoryPause()
{
	/* Exit action for state 'InspiratoryPause'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[10]));
}

/* Exit action for state 'RM'. */
void MVMStateMachine::exact_main_region_PSV_r1_RM()
{
	/* Exit action for state 'RM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[11]));
}

/* 'default' enter sequence for state StartUp */
void MVMStateMachine::enseq_main_region_StartUp_default()
{
	/* 'default' enter sequence for state StartUp */
	stateConfVector[0] = main_region_StartUp;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state PCV */
void MVMStateMachine::enseq_main_region_PCV_default()
{
	/* 'default' enter sequence for state PCV */
	enseq_main_region_PCV_r1_default();
}

/* 'default' enter sequence for state ExpiratoryPause */
void MVMStateMachine::enseq_main_region_PCV_r1_ExpiratoryPause_default()
{
	/* 'default' enter sequence for state ExpiratoryPause */
	enact_main_region_PCV_r1_ExpiratoryPause();
	stateConfVector[0] = main_region_PCV_r1_ExpiratoryPause;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Expiration */
void MVMStateMachine::enseq_main_region_PCV_r1_Expiration_default()
{
	/* 'default' enter sequence for state Expiration */
	enact_main_region_PCV_r1_Expiration();
	stateConfVector[0] = main_region_PCV_r1_Expiration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Inspiration */
void MVMStateMachine::enseq_main_region_PCV_r1_Inspiration_default()
{
	/* 'default' enter sequence for state Inspiration */
	enact_main_region_PCV_r1_Inspiration();
	stateConfVector[0] = main_region_PCV_r1_Inspiration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state InspiratoryPause */
void MVMStateMachine::enseq_main_region_PCV_r1_InspiratoryPause_default()
{
	/* 'default' enter sequence for state InspiratoryPause */
	enact_main_region_PCV_r1_InspiratoryPause();
	stateConfVector[0] = main_region_PCV_r1_InspiratoryPause;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state VentilationOff */
void MVMStateMachine::enseq_main_region_PCV_r1_VentilationOff_default()
{
	/* 'default' enter sequence for state VentilationOff */
	stateConfVector[0] = main_region_PCV_r1_VentilationOff;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state RM */
void MVMStateMachine::enseq_main_region_PCV_r1_RM_default()
{
	/* 'default' enter sequence for state RM */
	enact_main_region_PCV_r1_RM();
	stateConfVector[0] = main_region_PCV_r1_RM;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state ExpiratoryPause */
void MVMStateMachine::enseq_main_region_PSV_r1_ExpiratoryPause_default()
{
	/* 'default' enter sequence for state ExpiratoryPause */
	enact_main_region_PSV_r1_ExpiratoryPause();
	stateConfVector[0] = main_region_PSV_r1_ExpiratoryPause;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Expiration */
void MVMStateMachine::enseq_main_region_PSV_r1_Expiration_default()
{
	/* 'default' enter sequence for state Expiration */
	enact_main_region_PSV_r1_Expiration();
	stateConfVector[0] = main_region_PSV_r1_Expiration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Inspiration */
void MVMStateMachine::enseq_main_region_PSV_r1_Inspiration_default()
{
	/* 'default' enter sequence for state Inspiration */
	enact_main_region_PSV_r1_Inspiration();
	stateConfVector[0] = main_region_PSV_r1_Inspiration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state VentilationOff */
void MVMStateMachine::enseq_main_region_PSV_r1_VentilationOff_default()
{
	/* 'default' enter sequence for state VentilationOff */
	stateConfVector[0] = main_region_PSV_r1_VentilationOff;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state InspiratoryPause */
void MVMStateMachine::enseq_main_region_PSV_r1_InspiratoryPause_default()
{
	/* 'default' enter sequence for state InspiratoryPause */
	enact_main_region_PSV_r1_InspiratoryPause();
	stateConfVector[0] = main_region_PSV_r1_InspiratoryPause;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state RM */
void MVMStateMachine::enseq_main_region_PSV_r1_RM_default()
{
	/* 'default' enter sequence for state RM */
	enact_main_region_PSV_r1_RM();
	stateConfVector[0] = main_region_PSV_r1_RM;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state TestMode */
void MVMStateMachine::enseq_main_region_TestMode_default()
{
	/* 'default' enter sequence for state TestMode */
	stateConfVector[0] = main_region_TestMode;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Error */
void MVMStateMachine::enseq_main_region_Error_default()
{
	/* 'default' enter sequence for state Error */
	stateConfVector[0] = main_region_Error;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state PatientSelection */
void MVMStateMachine::enseq_main_region_PatientSelection_default()
{
	/* 'default' enter sequence for state PatientSelection */
	stateConfVector[0] = main_region_PatientSelection;
	stateConfVectorPosition = 0;
}

/* Default enter sequence for state null */
void MVMStateMachine::enseq_main_region__final__default()
{
	/* Default enter sequence for state null */
	stateConfVector[0] = main_region__final_;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region main region */
void MVMStateMachine::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region r1 */
void MVMStateMachine::enseq_main_region_PCV_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_main_region_PCV_r1__entry_Default();
}

/* Default exit sequence for state StartUp */
void MVMStateMachine::exseq_main_region_StartUp()
{
	/* Default exit sequence for state StartUp */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state PCV */
void MVMStateMachine::exseq_main_region_PCV()
{
	/* Default exit sequence for state PCV */
	exseq_main_region_PCV_r1();
}

/* Default exit sequence for state ExpiratoryPause */
void MVMStateMachine::exseq_main_region_PCV_r1_ExpiratoryPause()
{
	/* Default exit sequence for state ExpiratoryPause */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PCV_r1_ExpiratoryPause();
}

/* Default exit sequence for state Expiration */
void MVMStateMachine::exseq_main_region_PCV_r1_Expiration()
{
	/* Default exit sequence for state Expiration */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PCV_r1_Expiration();
}

/* Default exit sequence for state Inspiration */
void MVMStateMachine::exseq_main_region_PCV_r1_Inspiration()
{
	/* Default exit sequence for state Inspiration */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PCV_r1_Inspiration();
}

/* Default exit sequence for state InspiratoryPause */
void MVMStateMachine::exseq_main_region_PCV_r1_InspiratoryPause()
{
	/* Default exit sequence for state InspiratoryPause */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PCV_r1_InspiratoryPause();
}

/* Default exit sequence for state VentilationOff */
void MVMStateMachine::exseq_main_region_PCV_r1_VentilationOff()
{
	/* Default exit sequence for state VentilationOff */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state RM */
void MVMStateMachine::exseq_main_region_PCV_r1_RM()
{
	/* Default exit sequence for state RM */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PCV_r1_RM();
}

/* Default exit sequence for state PSV */
void MVMStateMachine::exseq_main_region_PSV()
{
	/* Default exit sequence for state PSV */
	exseq_main_region_PSV_r1();
}

/* Default exit sequence for state ExpiratoryPause */
void MVMStateMachine::exseq_main_region_PSV_r1_ExpiratoryPause()
{
	/* Default exit sequence for state ExpiratoryPause */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PSV_r1_ExpiratoryPause();
}

/* Default exit sequence for state Expiration */
void MVMStateMachine::exseq_main_region_PSV_r1_Expiration()
{
	/* Default exit sequence for state Expiration */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PSV_r1_Expiration();
}

/* Default exit sequence for state Inspiration */
void MVMStateMachine::exseq_main_region_PSV_r1_Inspiration()
{
	/* Default exit sequence for state Inspiration */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PSV_r1_Inspiration();
}

/* Default exit sequence for state VentilationOff */
void MVMStateMachine::exseq_main_region_PSV_r1_VentilationOff()
{
	/* Default exit sequence for state VentilationOff */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state InspiratoryPause */
void MVMStateMachine::exseq_main_region_PSV_r1_InspiratoryPause()
{
	/* Default exit sequence for state InspiratoryPause */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PSV_r1_InspiratoryPause();
}

/* Default exit sequence for state RM */
void MVMStateMachine::exseq_main_region_PSV_r1_RM()
{
	/* Default exit sequence for state RM */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_PSV_r1_RM();
}

/* Default exit sequence for state TestMode */
void MVMStateMachine::exseq_main_region_TestMode()
{
	/* Default exit sequence for state TestMode */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Error */
void MVMStateMachine::exseq_main_region_Error()
{
	/* Default exit sequence for state Error */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state PatientSelection */
void MVMStateMachine::exseq_main_region_PatientSelection()
{
	/* Default exit sequence for state PatientSelection */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for final state. */
void MVMStateMachine::exseq_main_region__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = MVMStateMachine_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for region main region */
void MVMStateMachine::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of MVMStateMachine.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_StartUp :
		{
			exseq_main_region_StartUp();
			break;
		}
		case main_region_PCV_r1_ExpiratoryPause :
		{
			exseq_main_region_PCV_r1_ExpiratoryPause();
			break;
		}
		case main_region_PCV_r1_Expiration :
		{
			exseq_main_region_PCV_r1_Expiration();
			break;
		}
		case main_region_PCV_r1_Inspiration :
		{
			exseq_main_region_PCV_r1_Inspiration();
			break;
		}
		case main_region_PCV_r1_InspiratoryPause :
		{
			exseq_main_region_PCV_r1_InspiratoryPause();
			break;
		}
		case main_region_PCV_r1_VentilationOff :
		{
			exseq_main_region_PCV_r1_VentilationOff();
			break;
		}
		case main_region_PCV_r1_RM :
		{
			exseq_main_region_PCV_r1_RM();
			break;
		}
		case main_region_PSV_r1_ExpiratoryPause :
		{
			exseq_main_region_PSV_r1_ExpiratoryPause();
			break;
		}
		case main_region_PSV_r1_Expiration :
		{
			exseq_main_region_PSV_r1_Expiration();
			break;
		}
		case main_region_PSV_r1_Inspiration :
		{
			exseq_main_region_PSV_r1_Inspiration();
			break;
		}
		case main_region_PSV_r1_VentilationOff :
		{
			exseq_main_region_PSV_r1_VentilationOff();
			break;
		}
		case main_region_PSV_r1_InspiratoryPause :
		{
			exseq_main_region_PSV_r1_InspiratoryPause();
			break;
		}
		case main_region_PSV_r1_RM :
		{
			exseq_main_region_PSV_r1_RM();
			break;
		}
		case main_region_TestMode :
		{
			exseq_main_region_TestMode();
			break;
		}
		case main_region_Error :
		{
			exseq_main_region_Error();
			break;
		}
		case main_region_PatientSelection :
		{
			exseq_main_region_PatientSelection();
			break;
		}
		case main_region__final_ :
		{
			exseq_main_region__final_();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void MVMStateMachine::exseq_main_region_PCV_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of MVMStateMachine.main_region.PCV.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_PCV_r1_ExpiratoryPause :
		{
			exseq_main_region_PCV_r1_ExpiratoryPause();
			break;
		}
		case main_region_PCV_r1_Expiration :
		{
			exseq_main_region_PCV_r1_Expiration();
			break;
		}
		case main_region_PCV_r1_Inspiration :
		{
			exseq_main_region_PCV_r1_Inspiration();
			break;
		}
		case main_region_PCV_r1_InspiratoryPause :
		{
			exseq_main_region_PCV_r1_InspiratoryPause();
			break;
		}
		case main_region_PCV_r1_VentilationOff :
		{
			exseq_main_region_PCV_r1_VentilationOff();
			break;
		}
		case main_region_PCV_r1_RM :
		{
			exseq_main_region_PCV_r1_RM();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void MVMStateMachine::exseq_main_region_PSV_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of MVMStateMachine.main_region.PSV.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_PSV_r1_ExpiratoryPause :
		{
			exseq_main_region_PSV_r1_ExpiratoryPause();
			break;
		}
		case main_region_PSV_r1_Expiration :
		{
			exseq_main_region_PSV_r1_Expiration();
			break;
		}
		case main_region_PSV_r1_Inspiration :
		{
			exseq_main_region_PSV_r1_Inspiration();
			break;
		}
		case main_region_PSV_r1_VentilationOff :
		{
			exseq_main_region_PSV_r1_VentilationOff();
			break;
		}
		case main_region_PSV_r1_InspiratoryPause :
		{
			exseq_main_region_PSV_r1_InspiratoryPause();
			break;
		}
		case main_region_PSV_r1_RM :
		{
			exseq_main_region_PSV_r1_RM();
			break;
		}
		default: break;
	}
}

/* The reactions of state null. */
void MVMStateMachine::react_main_region_PCV_r1__choice_0()
{
	/* The reactions of state null. */
	if (check_main_region_PCV_r1__choice_0_tr0_tr0())
	{ 
		effect_main_region_PCV_r1__choice_0_tr0();
	}  else
	{
		effect_main_region_PCV_r1__choice_0_tr1();
	}
}

/* The reactions of state null. */
void MVMStateMachine::react_main_region_PCV_r1__choice_1()
{
	/* The reactions of state null. */
	if (check_main_region_PCV_r1__choice_1_tr0_tr0())
	{ 
		effect_main_region_PCV_r1__choice_1_tr0();
	}  else
	{
		if (check_main_region_PCV_r1__choice_1_tr1_tr1())
		{ 
			effect_main_region_PCV_r1__choice_1_tr1();
		} 
	}
}

/* The reactions of state null. */
void MVMStateMachine::react_main_region_PCV_r1__choice_2()
{
	/* The reactions of state null. */
	if (check_main_region_PCV_r1__choice_2_tr0_tr0())
	{ 
		effect_main_region_PCV_r1__choice_2_tr0();
	}  else
	{
		if (check_main_region_PCV_r1__choice_2_tr1_tr1())
		{ 
			effect_main_region_PCV_r1__choice_2_tr1();
		} 
	}
}

/* The reactions of state null. */
void MVMStateMachine::react_main_region_PSV_r1__choice_0()
{
	/* The reactions of state null. */
	if (check_main_region_PSV_r1__choice_0_tr0_tr0())
	{ 
		effect_main_region_PSV_r1__choice_0_tr0();
	}  else
	{
		if (check_main_region_PSV_r1__choice_0_tr1_tr1())
		{ 
			effect_main_region_PSV_r1__choice_0_tr1();
		} 
	}
}

/* The reactions of state null. */
void MVMStateMachine::react_main_region_PSV_r1__choice_1()
{
	/* The reactions of state null. */
	if (check_main_region_PSV_r1__choice_1_tr0_tr0())
	{ 
		effect_main_region_PSV_r1__choice_1_tr0();
	}  else
	{
		if (check_main_region_PSV_r1__choice_1_tr1_tr1())
		{ 
			effect_main_region_PSV_r1__choice_1_tr1();
		} 
	}
}

/* Default react sequence for initial entry  */
void MVMStateMachine::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StartUp_default();
}

/* Default react sequence for initial entry  */
void MVMStateMachine::react_main_region_PCV_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_PCV_r1_VentilationOff_default();
}

sc_boolean MVMStateMachine::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean MVMStateMachine::main_region_StartUp_react(const sc_boolean try_transition) {
	/* The reactions of state StartUp. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (iface.startupEnded_raised)
			{ 
				exseq_main_region_StartUp();
				enseq_main_region_PatientSelection_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_react(const sc_boolean try_transition) {
	/* The reactions of state PCV. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (iface.poweroff_raised)
			{ 
				exseq_main_region_PCV();
				enseq_main_region__final__default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_r1_ExpiratoryPause_react(const sc_boolean try_transition) {
	/* The reactions of state ExpiratoryPause. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PCV_react(try_transition)) == (false))
		{ 
			if (timeEvents[0])
			{ 
				exseq_main_region_PCV_r1_ExpiratoryPause();
				enseq_main_region_PCV_r1_Inspiration_default();
			}  else
			{
				if (!iface.exp_pause_button)
				{ 
					exseq_main_region_PCV_r1_ExpiratoryPause();
					enseq_main_region_PCV_r1_Inspiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_r1_Expiration_react(const sc_boolean try_transition) {
	/* The reactions of state Expiration. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PCV_react(try_transition)) == (false))
		{ 
			if (timeEvents[1])
			{ 
				exseq_main_region_PCV_r1_Expiration();
				iface_OCB->closeOutputValve();
				react_main_region_PCV_r1__choice_0();
			}  else
			{
				if (((timeEvents[2])) && ((iface_OCB->dropPAW_ITS_PCV())))
				{ 
					exseq_main_region_PCV_r1_Expiration();
					iface_OCB->closeOutputValve();
					enseq_main_region_PCV_r1_Inspiration_default();
				}  else
				{
					if (iface.stopVentilation_raised)
					{ 
						exseq_main_region_PCV_r1_Expiration();
						iface.Finish_raised = true;
						enseq_main_region_PCV_r1_VentilationOff_default();
					}  else
					{
						did_transition = false;
					}
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_r1_Inspiration_react(const sc_boolean try_transition) {
	/* The reactions of state Inspiration. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PCV_react(try_transition)) == (false))
		{ 
			if (timeEvents[3])
			{ 
				exseq_main_region_PCV_r1_Inspiration();
				react_main_region_PCV_r1__choice_1();
			}  else
			{
				if (iface_OCB->pressureTooHighPCV())
				{ 
					exseq_main_region_PCV_r1_Inspiration();
					enseq_main_region_PCV_r1_Expiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_r1_InspiratoryPause_react(const sc_boolean try_transition) {
	/* The reactions of state InspiratoryPause. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PCV_react(try_transition)) == (false))
		{ 
			if (!iface.ins_pause_button)
			{ 
				exseq_main_region_PCV_r1_InspiratoryPause();
				enseq_main_region_PCV_r1_Expiration_default();
			}  else
			{
				if (timeEvents[4])
				{ 
					exseq_main_region_PCV_r1_InspiratoryPause();
					enseq_main_region_PCV_r1_Expiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_r1_VentilationOff_react(const sc_boolean try_transition) {
	/* The reactions of state VentilationOff. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PCV_react(try_transition)) == (false))
		{ 
			if (((iface.setMode_raised)) && (((iface.setMode_value) == (P_SUPPORTED_V))))
			{ 
				exseq_main_region_PCV();
				enseq_main_region_PSV_r1_VentilationOff_default();
			}  else
			{
				if (iface.startVentilation_raised)
				{ 
					exseq_main_region_PCV_r1_VentilationOff();
					iface_OCB->closeOutputValve();
					enseq_main_region_PCV_r1_Inspiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PCV_r1_RM_react(const sc_boolean try_transition) {
	/* The reactions of state RM. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PCV_react(try_transition)) == (false))
		{ 
			if (iface.rm_button_stop)
			{ 
				exseq_main_region_PCV_r1_RM();
				enseq_main_region_PCV_r1_Expiration_default();
			}  else
			{
				if (timeEvents[5])
				{ 
					exseq_main_region_PCV_r1_RM();
					enseq_main_region_PCV_r1_Expiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_react(const sc_boolean try_transition) {
	/* The reactions of state PSV. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (iface.poweroff_raised)
			{ 
				exseq_main_region_PSV();
				enseq_main_region__final__default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_r1_ExpiratoryPause_react(const sc_boolean try_transition) {
	/* The reactions of state ExpiratoryPause. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PSV_react(try_transition)) == (false))
		{ 
			if (timeEvents[6])
			{ 
				exseq_main_region_PSV_r1_ExpiratoryPause();
				enseq_main_region_PSV_r1_Inspiration_default();
			}  else
			{
				if (!iface.exp_pause_button)
				{ 
					exseq_main_region_PSV_r1_ExpiratoryPause();
					enseq_main_region_PSV_r1_Inspiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_r1_Expiration_react(const sc_boolean try_transition) {
	/* The reactions of state Expiration. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PSV_react(try_transition)) == (false))
		{ 
			if (iface_OCB->dropPAW_ITS_PSV())
			{ 
				exseq_main_region_PSV_r1_Expiration();
				iface_OCB->closeOutputValve();
				enseq_main_region_PSV_r1_Inspiration_default();
			}  else
			{
				if (timeEvents[7])
				{ 
					exseq_main_region_PSV();
					iface_OCB->closeOutputValve();
					enseq_main_region_PCV_r1_Inspiration_default();
				}  else
				{
					if (((timeEvents[8])) && ((iface.exp_pause_button)))
					{ 
						exseq_main_region_PSV_r1_Expiration();
						enseq_main_region_PSV_r1_ExpiratoryPause_default();
					}  else
					{
						if (iface.stopVentilation_raised)
						{ 
							exseq_main_region_PSV_r1_Expiration();
							iface.Finish_raised = true;
							enseq_main_region_PSV_r1_VentilationOff_default();
						}  else
						{
							did_transition = false;
						}
					}
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_r1_Inspiration_react(const sc_boolean try_transition) {
	/* The reactions of state Inspiration. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PSV_react(try_transition)) == (false))
		{ 
			if (iface_OCB->flowDropPSV())
			{ 
				exseq_main_region_PSV_r1_Inspiration();
				react_main_region_PSV_r1__choice_0();
			}  else
			{
				if (timeEvents[9])
				{ 
					exseq_main_region_PSV_r1_Inspiration();
					react_main_region_PSV_r1__choice_0();
				}  else
				{
					if (iface_OCB->pressureTooHighPSV())
					{ 
						exseq_main_region_PSV_r1_Inspiration();
						enseq_main_region_PSV_r1_Expiration_default();
					}  else
					{
						did_transition = false;
					}
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_r1_VentilationOff_react(const sc_boolean try_transition) {
	/* The reactions of state VentilationOff. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PSV_react(try_transition)) == (false))
		{ 
			if (iface.startVentilation_raised)
			{ 
				exseq_main_region_PSV_r1_VentilationOff();
				iface_OCB->closeOutputValve();
				enseq_main_region_PSV_r1_Inspiration_default();
			}  else
			{
				if (((iface.setMode_raised)) && (((iface.setMode_value) == (P_CONTROLLED_V))))
				{ 
					exseq_main_region_PSV();
					enseq_main_region_PCV_r1_VentilationOff_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_r1_InspiratoryPause_react(const sc_boolean try_transition) {
	/* The reactions of state InspiratoryPause. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PSV_react(try_transition)) == (false))
		{ 
			if (!iface.ins_pause_button)
			{ 
				exseq_main_region_PSV_r1_InspiratoryPause();
				enseq_main_region_PSV_r1_Expiration_default();
			}  else
			{
				if (timeEvents[10])
				{ 
					exseq_main_region_PSV_r1_InspiratoryPause();
					enseq_main_region_PSV_r1_Expiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PSV_r1_RM_react(const sc_boolean try_transition) {
	/* The reactions of state RM. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_PSV_react(try_transition)) == (false))
		{ 
			if (iface.rm_button_stop)
			{ 
				exseq_main_region_PSV_r1_RM();
				enseq_main_region_PSV_r1_Expiration_default();
			}  else
			{
				if (timeEvents[11])
				{ 
					exseq_main_region_PSV_r1_RM();
					enseq_main_region_PSV_r1_Expiration_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_TestMode_react(const sc_boolean try_transition) {
	/* The reactions of state TestMode. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (iface.testPassed_raised)
			{ 
				exseq_main_region_TestMode();
				enseq_main_region_PCV_default();
			}  else
			{
				if (iface.testFailed_raised)
				{ 
					exseq_main_region_TestMode();
					enseq_main_region_Error_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_Error_react(const sc_boolean try_transition) {
	/* The reactions of state Error. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (iface.poweroff_raised)
			{ 
				exseq_main_region_Error();
				enseq_main_region__final__default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region_PatientSelection_react(const sc_boolean try_transition) {
	/* The reactions of state PatientSelection. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (iface.resume_raised)
			{ 
				exseq_main_region_PatientSelection();
				enseq_main_region_PCV_default();
			}  else
			{
				if (iface.newPatient_raised)
				{ 
					exseq_main_region_PatientSelection();
					enseq_main_region_TestMode_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean MVMStateMachine::main_region__final__react(const sc_boolean try_transition) {
	/* The reactions of state null. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}



