//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : MVM.sm
//

#ifndef MVM_SM_H
#define MVM_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class MainMap;
class MainMap_StartUpMode;
class MainMap_PCV_VentilationOff;
class MainMap_PCV_Inspiration;
class MainMap_PCV_Expiration;
class MainMap_Default;
class MVMState;
class MVMContext;
class MVM;

class MVMState :
    public statemap::State
{
public:

    MVMState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(MVMContext&) {};
    virtual void Exit(MVMContext&) {};

    virtual void run(MVMContext& context);
    virtual void switchon(MVMContext& context);

protected:

    virtual void Default(MVMContext& context);
};

class MainMap
{
public:

    static MainMap_StartUpMode StartUpMode;
    static MainMap_PCV_VentilationOff PCV_VentilationOff;
    static MainMap_PCV_Inspiration PCV_Inspiration;
    static MainMap_PCV_Expiration PCV_Expiration;
};

class MainMap_Default :
    public MVMState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : MVMState(name, stateId)
    {};

};

class MainMap_StartUpMode :
    public MainMap_Default
{
public:
    MainMap_StartUpMode(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void switchon(MVMContext& context);
};

class MainMap_PCV_VentilationOff :
    public MainMap_Default
{
public:
    MainMap_PCV_VentilationOff(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void run(MVMContext& context);
};

class MainMap_PCV_Inspiration :
    public MainMap_Default
{
public:
    MainMap_PCV_Inspiration(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class MainMap_PCV_Expiration :
    public MainMap_Default
{
public:
    MainMap_PCV_Expiration(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

};

class MVMContext :
    public statemap::FSMContext
{
public:

    explicit MVMContext(MVM& owner)
    : FSMContext(MainMap::StartUpMode),
      _owner(owner)
    {};

    MVMContext(MVM& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline MVM& getOwner()
    {
        return (_owner);
    };

    inline MVMState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<MVMState&>(*_state);
    };

    inline void run()
    {
        getState().run(*this);
    };

    inline void switchon()
    {
        getState().switchon(*this);
    };

private:
    MVM& _owner;
};


#endif // MVM_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
