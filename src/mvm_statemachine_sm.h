//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : mvm_statemachine.sm
//

#ifndef MVM_STATEMACHINE_SM_H
#define MVM_STATEMACHINE_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class MainMap;
class MainMap_Locked;
class MainMap_Unlocked;
class MainMap_Default;
class MMVStateMachineState;
class mvm_statemachineContext;
class MMVStateMachine;

class MMVStateMachineState :
    public statemap::State
{
public:

    MMVStateMachineState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(mvm_statemachineContext&) {};
    virtual void Exit(mvm_statemachineContext&) {};

    virtual void coin(mvm_statemachineContext& context);
    virtual void pass(mvm_statemachineContext& context);

protected:

    virtual void Default(mvm_statemachineContext& context);
};

class MainMap
{
public:

    static MainMap_Locked Locked;
    static MainMap_Unlocked Unlocked;
};

class MainMap_Default :
    public MMVStateMachineState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : MMVStateMachineState(name, stateId)
    {};

};

class MainMap_Locked :
    public MainMap_Default
{
public:
    MainMap_Locked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void coin(mvm_statemachineContext& context);
    virtual void pass(mvm_statemachineContext& context);
};

class MainMap_Unlocked :
    public MainMap_Default
{
public:
    MainMap_Unlocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void coin(mvm_statemachineContext& context);
    virtual void pass(mvm_statemachineContext& context);
};

class mvm_statemachineContext :
    public statemap::FSMContext
{
public:

    explicit mvm_statemachineContext(MMVStateMachine& owner)
    : FSMContext(MainMap::Locked),
      _owner(owner)
    {};

    mvm_statemachineContext(MMVStateMachine& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline MMVStateMachine& getOwner()
    {
        return (_owner);
    };

    inline MMVStateMachineState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<MMVStateMachineState&>(*_state);
    };

    inline void coin()
    {
        getState().coin(*this);
    };

    inline void pass()
    {
        getState().pass(*this);
    };

private:
    MMVStateMachine& _owner;
};


#endif // MVM_STATEMACHINE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
