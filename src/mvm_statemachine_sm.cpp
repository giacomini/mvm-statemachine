//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : mvm_statemachine.sm
//

#include "MVM.h"
#include "../src\mvm_statemachine_sm.h"

using namespace statemap;

// Static class declarations.
MainMap_Locked MainMap::Locked("MainMap::Locked", 0);
MainMap_Unlocked MainMap::Unlocked("MainMap::Unlocked", 1);

void MMVStateMachineState::coin(mvm_statemachineContext& context)
{
    Default(context);
}

void MMVStateMachineState::pass(mvm_statemachineContext& context)
{
    Default(context);
}

void MMVStateMachineState::Default(mvm_statemachineContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void MainMap_Locked::coin(mvm_statemachineContext& context)
{
    MMVStateMachine& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.unlock();
        context.setState(MainMap::Unlocked);
    }
    catch (...)
    {
        context.setState(MainMap::Unlocked);
        throw;
    }
    context.getState().Entry(context);


}

void MainMap_Locked::pass(mvm_statemachineContext& context)
{
    MMVStateMachine& ctxt = context.getOwner();

    MMVStateMachineState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.alarm();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void MainMap_Unlocked::coin(mvm_statemachineContext& context)
{
    MMVStateMachine& ctxt = context.getOwner();

    MMVStateMachineState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.thankyou();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void MainMap_Unlocked::pass(mvm_statemachineContext& context)
{
    MMVStateMachine& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.lock();
        context.setState(MainMap::Locked);
    }
    catch (...)
    {
        context.setState(MainMap::Locked);
        throw;
    }
    context.getState().Entry(context);


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
